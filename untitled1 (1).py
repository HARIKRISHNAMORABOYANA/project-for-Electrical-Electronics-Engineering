# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HWSH-KmpzfjgUOFSg0ZSQyXiKxiDPGn-
"""

import numpy as np
import matplotlib.pyplot as plt

# Simulation Parameters
time_step = 1  # in seconds
total_time = 3600  # 1 hour in seconds
time = np.arange(0, total_time, time_step)

# Battery Parameters
capacity_ah = 2.0  # 2Ah battery
voltage_full = 12.6  # Fully charged voltage
voltage_empty = 11.5  # Fully discharged voltage

# Charge and Discharge Currents
charging_current = 1.0  # Amps
discharging_current = 0.5  # Amps

# Initialize SOC (0 = 0%, 1 = 100%)
soc = []
voltage = []

# Initial Conditions
soc_value = 0.2  # Start at 20% charged
charging = True

for t in time:
    if charging:
        soc_value += (charging_current * time_step / 3600) / capacity_ah
        if soc_value >= 1.0:
            soc_value = 1.0
            charging = False  # Switch to discharging
    else:
        soc_value -= (discharging_current * time_step / 3600) / capacity_ah
        if soc_value <= 0.0:
            soc_value = 0.0
            charging = True  # Switch to charging

    # Clamp SOC between 0 and 1
    soc_value = max(0, min(1, soc_value))
    soc.append(soc_value)

    # Linear approximation of voltage based on SOC
    voltage_value = voltage_empty + soc_value * (voltage_full - voltage_empty)
    voltage.append(voltage_value)

# Plot SOC over Time
plt.figure(figsize=(10, 5))
plt.plot(time / 60, np.array(soc) * 100, label='SOC (%)', color='blue')
plt.xlabel('Time (minutes)')
plt.ylabel('State of Charge (%)')
plt.title('Battery Charging and Discharging Simulation')
plt.grid(True)
plt.legend()

# Plot Voltage over Time (Optional)
plt.figure(figsize=(10, 5))
plt.plot(time / 60, voltage, label='Voltage (V)', color='green')
plt.xlabel('Time (minutes)')
plt.ylabel('Battery Voltage (V)')
plt.title('Battery Voltage vs Time')
plt.grid(True)
plt.legend()
plt.show()